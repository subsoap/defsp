function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})
	
	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)
	
	self.view = vmath.matrix4()
end

local render_helper = require("render.render_helper")

function update(self)
	render.set_depth_mask(true)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	local original_width = render.get_width()
	local original_height = render.get_height()
	local current_width = render.get_window_width()
	local current_height = render.get_window_height()
	render.set_viewport(0, 0, current_width, current_height)
	render.set_view(self.view)
	
	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	-- center (and zoom out if needed)
	local zoom_factor
	if original_width > original_height then
		if original_width < current_width then
			zoom_factor = math.max(math.min(current_width / original_width, current_height / original_height), 1)
		else
			zoom_factor = math.min(math.min(current_width / original_width, current_height / original_height), 1)
		end
	else
		if original_height < current_height then
			zoom_factor = math.max(math.min(current_width / original_width, current_height / original_height), 1)
		else
			zoom_factor = math.min(math.min(current_width / original_width, current_height / original_height), 1)
		end		
	end
	local projected_width = current_width / zoom_factor
	local projected_height = current_height / zoom_factor
	local xoffset = -(projected_width - original_width) / 2
	local yoffset = -(projected_height - original_height) / 2
	render.set_projection(vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, -1000, 1000))

	-- store zoom and offset for use when translating touch events to positions
	render_helper.zoom_factor = zoom_factor
	render_helper.xoffset = xoffset
	render_helper.yoffset = yoffset
	
	
	render.draw(self.tile_pred)
	render.draw(self.particle_pred)
	render.draw_debug3d()
	
	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, -1000, 1000))
	
	
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.set_projection(vmath.matrix4_orthographic(0, current_width, 0, current_height, -1000, 1000))
	
	render.set_depth_mask(false)
	render.draw_debug2d()
end

function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("set_view_projection") then
		self.cameras[message.id] = message
	end
end