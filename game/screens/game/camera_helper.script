
local camera_offset_helper = require("utils/camera_offset_helper")

local input_touch = hash("touch")
local input_key_1 = hash("key_1")
local input_key_2 = hash("key_2")
local input_key_3 = hash("key_3")
local input_key_4 = hash("key_4")
local input_key_5 = hash("key_5")
local input_key_6 = hash("key_6")
local input_key_7 = hash("key_7")
local input_key_8 = hash("key_8")
local input_key_9 = hash("key_9")


local render_helper = require("render.render_helper")

local grid_size = 96

function distance(x1,y1,x2,y2) return math.sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2) end

function round(num)
    under = math.floor(num)
    upper = math.floor(num) + 1
    underV = -(under - num)
    upperV = upper - num
    if (upperV > underV) then
        return under
    else
        return upper
    end
end

function init(self)
	self.drag_on = false
	self.click_position = 0
	self.travel_position = 0
	self.temp_position = 0
	self.original_position = go.get_position()
	self.current_position = self.original_position
	self.offset_position = self.current_position - self.original_position
	camera_offset_helper.original_x = self.original_position.x
	camera_offset_helper.original_y = self.original_position.y
	camera_offset_helper.offset_x = 0
	camera_offset_helper.offset_y = 0
	--self.x_origin
	msg.post(".", "acquire_input_focus")
	--go.set_position(vmath.vector3(0,0,1)) -- center at origin
	self.compass_timer = 0
	self.block_type = 1
	
	self.drag_block = 0
	self.drag_block_counter = 0
	
	
	
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	self.current_position = go.get_position()
	self.offset_position = self.current_position - self.original_position
	camera_offset_helper.offset_x = self.offset_position.x
	camera_offset_helper.offset_y = self.offset_position.y
	camera_offset_helper.offset = self.offset_position

	self.nearest_x = round(self.current_position.x / grid_size) * grid_size
	self.nearest_y = round(self.current_position.y / grid_size) * grid_size
	self.grid_position = vmath.vector3((self.nearest_x / grid_size), (self.nearest_y / grid_size), 0)
	self.block_position = vmath.vector3(self.nearest_x, self.nearest_y, 0)
	go.set_position(self.block_position, "grid_position_marker")
	--pprint(grid_position)
	

	
	

end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function enable_drag(self)
	self.drag_block_counter = self.drag_block_counter + 1
	if self.drag_block_counter == 2 then
		self.drag_block_counter = 0
		self.drag_block = 0
	end
end

function on_input(self, action_id, action)
	if action_id == input_touch and action.pressed == true then
		self.click_position = vmath.vector3(action.screen_x, action.screen_y, 0)
		self.temp_position = go.get_position()
	end
	if action_id == input_touch and action.released == false and (self.drag_block == 0) then
		self.travel_position = vmath.vector3(action.screen_x, action.screen_y, 0) - self.click_position
		go.set_position(self.temp_position - self.travel_position)
	end
	if action_id == input_touch and action.released == true then
		self.drag_block = 1
		local self_id = go.get_id()
		go.animate(self_id, "position.x", go.PLAYBACK_ONCE_FORWARD, self.original_position.x, go.EASING_OUTEXPO, 0.2, 0, enable_drag(self))
		go.animate(self_id, "position.y", go.PLAYBACK_ONCE_FORWARD, self.original_position.y, go.EASING_OUTEXPO, 0.2, 0, enable_drag(self))
	end

	
		local click_position = render_helper.action_to_position(action) - vmath.vector3(320, 568, 0) + go.get_position()
		local click_position_grid = render_helper.action_to_position(action) - vmath.vector3(320, 568, 0) + go.get_position()
		click_position_grid.x = round(click_position_grid.x/grid_size) * grid_size
		click_position_grid.y = round(click_position_grid.y/grid_size) * grid_size
		click_position_grid.z = -1
		go.set_position(click_position_grid + vmath.vector3(0,0,1), "cursor_grid_hover")	
		

end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
